import streamlit as st
import pandas as pd
from datetime import datetime
from streamlit_option_menu import option_menu
import altair as alt
import streamlit.components.v1 as components

# Fun√ß√£o para for√ßar rerun (usar se precisar)
def forcar_rerun():
    params = st.experimental_get_query_params()
    count = int(params["count"][0]) if "count" in params else 0
    st.experimental_set_query_params(count=str(count + 1))

st.set_page_config(layout="wide", page_title="Processos Elei√ß√£o CROS 2025 - CFO")

# CSS customizado (mant√©m o seu estilo)
def aplicar_css():
    st.markdown("""
    <style>
    body {
        font-family: 'Segoe UI', sans-serif;
    }
    .footer {
        position: fixed;
        bottom: 0;
        width: 100%;
        background-color: #0B3D91;
        color: white;
        text-align: center;
        padding: 6px 0;
        font-weight: 600;
        font-size: 14px;
        z-index: 9999;
    }
    </style>
    """, unsafe_allow_html=True)
aplicar_css()

# Listas fixas para selectboxes
tipos_acao = [
    "", "A√ß√£o Civil P√∫blica", "A√ß√£o Popular", "A√ß√£o de Improbidade Administrativa", "Mandado de Seguran√ßa",
    "A√ß√£o Declarat√≥ria de Nulidade de Ato Administrativo", "A√ß√£o Anulat√≥ria de Ato Administrativo",
    "A√ß√£o de Cobran√ßa contra a Administra√ß√£o P√∫blica", "A√ß√£o de Obriga√ß√£o de Fazer contra o Poder P√∫blico",
    "A√ß√£o Indenizat√≥ria por Atos da Administra√ß√£o", "A√ß√£o de Responsabilidade por Dano ao Er√°rio",
    "A√ß√£o de Responsabiliza√ß√£o √âtica de Servidor P√∫blico", "A√ß√£o √âtica contra √ìrg√£o da Administra√ß√£o",
    "A√ß√£o √âtica sobre Conduta Funcional de Agente P√∫blico", "A√ß√£o de Controle de Constitucionalidade",
    "A√ß√£o Direta de Inconstitucionalidade", "A√ß√£o Declarat√≥ria de Constitucionalidade",
    "A√ß√£o Direta de Inconstitucionalidade por Omiss√£o", "A√ß√£o Rescis√≥ria contra Decis√µes Administrativas",
    "A√ß√£o Cautelar em Face da Administra√ß√£o", "A√ß√£o de Interven√ß√£o Federal",
    "A√ß√£o sobre Licita√ß√µes e Contratos Administrativos", "A√ß√£o sobre Concurso P√∫blico",
    "A√ß√£o sobre Servidores P√∫blicos Federais", "A√ß√£o Previdenci√°ria contra o INSS",
    "A√ß√£o sobre Sa√∫de P√∫blica (fornecimento de medicamentos etc.)", "A√ß√£o sobre Direito √† Educa√ß√£o P√∫blica",
    "A√ß√£o Coletiva sobre Pol√≠ticas P√∫blicas", "Outras"
]

recursos = [
    "", "Apela√ß√£o", "Agravo de Instrumento", "Embargos de Declara√ß√£o", "Recurso Especial",
    "Recurso Extraordin√°rio", "Mandado de Seguran√ßa", "Habeas Corpus", "Recurso Ordin√°rio",
    "Agravo Interno", "Embargos Infringentes", "Embargos √† Execu√ß√£o", "Revis√£o Criminal",
    "Correi√ß√£o Parcial", "Recurso em Sentido Estrito", "Conflito de Compet√™ncia", "Recurso Adesivo",
    "Agravo Regimental", "Outros"
]

locais_ajuizamento = ["", "JF", "TRF1", "TRF2", "TRF3", "TRF4", "TRF5", "TRF6", "STJ", "STF"]

# Inicializa√ß√£o das session states usados
if "logado" not in st.session_state:
    st.session_state.logado = False
if "usuario_logado" not in st.session_state:
    st.session_state.usuario_logado = None
if "usuarios" not in st.session_state:
    st.session_state.usuarios = [
        {"nome": "Admin", "usuario": "admin", "senha": "admin123", "permissao": "master"},
        {"nome": "Usu√°rio", "usuario": "user", "senha": "123", "permissao": "normal"}
    ]
if "processos" not in st.session_state:
    st.session_state.processos = []
if "jurisprudencias" not in st.session_state:
    st.session_state.jurisprudencias = []
if "despachos" not in st.session_state:
    st.session_state.despachos = []
if "movimentacoes" not in st.session_state:
    st.session_state.movimentacoes = []
if "agenda" not in st.session_state:
    st.session_state.agenda = []
if "autores" not in st.session_state:
    st.session_state.autores = [{"nome": "", "cpf_cnpj": ""}]
if "reus" not in st.session_state:
    st.session_state.reus = [{"nome": "", "cpf_cnpj": ""}]

# Fun√ß√µes b√°sicas
def validar_login(usuario, senha):
    for u in st.session_state.usuarios:
        if u["usuario"] == usuario and u["senha"] == senha:
            return u
    return None

def usuario_eh_master():
    user = st.session_state.usuario_logado
    for u in st.session_state.usuarios:
        if u["usuario"] == user:
            return u["permissao"] == "master"
    return False

# --- Telas ---

def tela_login():
    st.title("üîê Login - Sistema Jur√≠dico CFO")
    with st.form("form_login"):
        usuario = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")
    if submit:
        user = validar_login(usuario, senha)
        if user:
            st.session_state.logado = True
            st.session_state.usuario_logado = usuario
            st.success(f"Bem-vindo, {user['nome']}!")
            st.experimental_rerun()
        else:
            st.error("Usu√°rio ou senha inv√°lidos.")

def inicio():
    st.title("üè† Painel Inicial - CFO Jur√≠dico")

    processos = st.session_state.processos
    agenda = st.session_state.agenda
    movs = st.session_state.movimentacoes

    hoje = pd.Timestamp(datetime.today().date())

    # --- FILTROS ---
    st.sidebar.subheader("Filtros - P√°gina Inicial")

    prazo_filtro = st.sidebar.slider("Prazos a vencer nos pr√≥ximos dias:", min_value=1, max_value=60, value=30)

    tribunais_oficiais = ["JF", "TRF1", "TRF2", "TRF3", "TRF4", "TRF5", "TRF6"]
    tribunais_selecionados = st.sidebar.multiselect("Tribunais para o quantitativo:", options=tribunais_oficiais, default=tribunais_oficiais)

    st.sidebar.markdown("---")
    st.sidebar.write(f"Usu√°rio logado: **{st.session_state.usuario_logado}**")

    st.subheader("üìÖ Pr√≥ximas Reuni√µes")

    if agenda:
        df_agenda = pd.DataFrame(agenda)
        df_agenda["Data"] = pd.to_datetime(df_agenda["Data"], format="%d/%m/%Y", errors='coerce')
        proximas = df_agenda[df_agenda["Data"] >= hoje].sort_values("Data")

        if proximas.empty:
            st.info("Nenhuma reuni√£o agendada para os pr√≥ximos dias.")
        else:
            prox_reuniao = proximas.iloc[0]
            dias_para_reuniao = (prox_reuniao["Data"] - hoje).days
            st.markdown(f"**Pr√≥xima reuni√£o:** {prox_reuniao['Evento']} em {prox_reuniao['Data'].strftime('%d/%m/%Y')} ({dias_para_reuniao} dias restantes)")
            st.write(prox_reuniao["Descri√ß√£o"])

            if len(proximas) > 1:
                st.table(proximas.iloc[1:][["Data", "Evento", "Descri√ß√£o"]].reset_index(drop=True))
    else:
        st.info("Nenhuma reuni√£o cadastrada.")

    st.markdown("---")

    st.subheader("‚è≥ Prazos a Vencer")

    if movs and processos:
        df_movs = pd.DataFrame(movs)
        df_movs["Prazo"] = pd.to_datetime(df_movs["Prazo"], format="%d/%m/%Y", errors='coerce')

        filtro_prazo_final = hoje + pd.Timedelta(days=prazo_filtro)
        prazos_abertos = df_movs[(df_movs["Prazo"].notnull()) & (df_movs["Prazo"] >= hoje) & (df_movs["Prazo"] <= filtro_prazo_final)].copy()

        if prazos_abertos.empty:
            st.info(f"Nenhum prazo vencendo nos pr√≥ximos {prazo_filtro} dias.")
        else:
            df_proc = pd.DataFrame(processos)
            df_proc["N√∫mero"] = df_proc["N√∫mero"].astype(str)
            prazos_abertos["N√∫mero"] = prazos_abertos["N√∫mero"].astype(str)
            df_join = prazos_abertos.merge(df_proc, on="N√∫mero", how="left", suffixes=("_mov", "_proc"))

            df_join = df_join.sort_values("Prazo")
            df_join["Dias Restantes"] = (df_join["Prazo"] - hoje).dt.days

            def cor_prazo(dias):
                if dias > 15:
                    return "background-color: #d4edda"  # verde claro
                elif 10 <= dias <= 15:
                    return "background-color: #fff3cd"  # amarelo claro
                else:
                    return "background-color: #f8d7da"  # vermelho claro

            st.dataframe(
                df_join[["N√∫mero", "Assunto", "Prazo", "Descri√ß√£o", "Dias Restantes"]]
                .style.applymap(lambda v: cor_prazo(v), subset=["Dias Restantes"])
            )
    else:
        st.info("Nenhuma movimenta√ß√£o ou processo cadastrado.")

    st.markdown("---")

    st.subheader("üìä Quantitativo de Processos por Tribunal")

    if processos:
        df = pd.DataFrame(processos)
        if "Local Ajuizamento" in df.columns:
            df_filtrado = df[df["Local Ajuizamento"].isin(tribunais_selecionados)]
            contagem = df_filtrado["Local Ajuizamento"].value_counts().reindex(tribunais_selecionados, fill_value=0)
            contagem_df = contagem.reset_index()
            contagem_df.columns = ["Tribunal", "Quantidade"]

            cols = st.columns(len(contagem_df))
            cores = ["#007BFF", "#28A745", "#FFC107", "#DC3545", "#17A2B8", "#6F42C1", "#FD7E14"]

            for i, row in contagem_df.iterrows():
                with cols[i]:
                    st.markdown(f"""
                        <div style="background-color: {cores[i % len(cores)]}; padding: 20px; border-radius: 10px; text-align: center; color: white;">
                            <h3>{row['Quantidade']}</h3>
                            <p>{row['Tribunal']}</p>
                        </div>
                    """, unsafe_allow_html=True)

            chart = alt.Chart(contagem_df).mark_bar().encode(
                x=alt.X("Tribunal", sort=tribunais_selecionados),
                y="Quantidade",
                tooltip=["Tribunal", "Quantidade"],
                color=alt.Color("Quantidade", scale=alt.Scale(scheme="blues"))
            ).properties(width=600, height=300)
            st.altair_chart(chart, use_container_width=True)
        else:
            st.warning("Coluna 'Local Ajuizamento' n√£o encontrada nos processos.")
    else:
        st.info("Nenhum processo cadastrado.")

def cadastro_processo():
    st.title("üìù Cadastro / Edi√ß√£o de Processo")

    if "autores" not in st.session_state:
        st.session_state.autores = [{"nome": "", "cpf_cnpj": ""}]
    if "reus" not in st.session_state:
        st.session_state.reus = [{"nome": "", "cpf_cnpj": ""}]

    st.write("### Parte Autora")
    for i in range(len(st.session_state.autores)):
        st.session_state.autores[i]["nome"] = st.text_input(f"Nome do Autor {i+1}", value=st.session_state.autores[i]["nome"], key=f"autor_nome_{i}")
        st.session_state.autores[i]["cpf_cnpj"] = st.text_input(f"CPF/CNPJ do Autor {i+1}", value=st.session_state.autores[i]["cpf_cnpj"], key=f"autor_cpf_{i}")
    if st.button("Adicionar Autor"):
        st.session_state.autores.append({"nome": "", "cpf_cnpj": ""})

    st.write("### Parte R√©")
    for i in range(len(st.session_state.reus)):
        st.session_state.reus[i]["nome"] = st.text_input(f"Nome do R√©u {i+1}", value=st.session_state.reus[i]["nome"], key=f"reu_nome_{i}")
        st.session_state.reus[i]["cpf_cnpj"] = st.text_input(f"CPF/CNPJ do R√©u {i+1}", value=st.session_state.reus[i]["cpf_cnpj"], key=f"reu_cpf_{i}")
    if st.button("Adicionar R√©u"):
        st.session_state.reus.append({"nome": "", "cpf_cnpj": ""})

    numero_default = st.session_state.get("numero_processo", "")
    assunto_default = st.session_state.get("assunto", "")
    data_distribuicao_default = st.session_state.get("data_distribuicao", datetime.today())
    tipo_acao_default = st.session_state.get("tipo_acao", tipos_acao[0])
    recurso_default = st.session_state.get("recurso", recursos[0])
    local_ajuizamento_default = st.session_state.get("local_ajuizamento", locais_ajuizamento[0])
    turma_vara_plenario_default = st.session_state.get("turma_vara_plenario", "")
    nome_magistrado_default = st.session_state.get("nome_magistrado", "")
    telefone_gabinete_default = st.session_state.get("telefone_gabinete", "")

    with st.form("form_processo"):
        numero = st.text_input("N√∫mero do Processo", value=numero_default)
        assunto = st.text_input("Assunto", value=assunto_default)
        data_distribuicao = st.date_input("Data de Distribui√ß√£o", value=data_distribuicao_default)
        tipo_acao = st.selectbox("Tipo de A√ß√£o", tipos_acao, index=tipos_acao.index(tipo_acao_default) if tipo_acao_default in tipos_acao else 0)
        recurso = st.selectbox("Recurso", recursos, index=recursos.index(recurso_default) if recurso_default in recursos else 0)
        local_ajuizamento = st.selectbox("Local onde foi ajuizado", locais_ajuizamento, index=locais_ajuizamento.index(local_ajuizamento_default) if local_ajuizamento_default in locais_ajuizamento else 0)
        turma_vara_plenario = st.text_input("Turma / Vara / Plen√°rio", value=turma_vara_plenario_default)
        nome_magistrado = st.text_input("Nome do Magistrado ou Ministro", value=nome_magistrado_default)
        telefone_gabinete = st.text_input("Telefone do Gabinete", value=telefone_gabinete_default)

        submit = st.form_submit_button("Salvar Processo")

    if submit:
        if numero.strip() == "":
            st.error("O n√∫mero do processo √© obrigat√≥rio.")
            return
        # Verificar se j√° existe
        achou = False
        for i, p in enumerate(st.session_state.processos):
            if p["N√∫mero"] == numero:
                # Atualizar processo existente
                st.session_state.processos[i] = {
                    "N√∫mero": numero,
                    "Assunto": assunto,
                    "Data Distribui√ß√£o": data_distribuicao.strftime("%d/%m/%Y"),
                    "Tipo de A√ß√£o": tipo_acao,
                    "Recurso": recurso,
                    "Local Ajuizamento": local_ajuizamento,
                    "Turma / Vara / Plen√°rio": turma_vara_plenario,
                    "Nome Magistrado": nome_magistrado,
                    "Telefone Gabinete": telefone_gabinete,
                    "Autores": st.session_state.autores.copy(),
                    "R√©us": st.session_state.reus.copy()
                }
                achou = True
                st.success(f"Processo {numero} atualizado com sucesso.")
                break
        if not achou:
            st.session_state.processos.append({
                "N√∫mero": numero,
                "Assunto": assunto,
                "Data Distribui√ß√£o": data_distribuicao.strftime("%d/%m/%Y"),
                "Tipo de A√ß√£o": tipo_acao,
                "Recurso": recurso,
                "Local Ajuizamento": local_ajuizamento,
                "Turma / Vara / Plen√°rio": turma_vara_plenario,
                "Nome Magistrado": nome_magistrado,
                "Telefone Gabinete": telefone_gabinete,
                "Autores": st.session_state.autores.copy(),
                "R√©us": st.session_state.reus.copy()
            })
            st.success(f"Processo {numero} cadastrado com sucesso.")

def cadastro_jurisprudencia():
    st.title("üìö Cadastro de Jurisprud√™ncia")

    with st.form("form_jurisprudencia"):
        tribunal = st.selectbox("Tribunal", ["", "TRF1", "TRF2", "TRF3", "TRF4", "TRF5", "STJ", "STF"])
        processo_referencia = st.text_input("N√∫mero do Processo de Refer√™ncia")
        data_decisao = st.date_input("Data da Decis√£o", value=datetime.today())
        ementa = st.text_area("Ementa")
        link_decisao = st.text_input("Link da Decis√£o")
        submit = st.form_submit_button("Salvar Jurisprud√™ncia")

    if submit:
        if processo_referencia.strip() == "":
            st.error("N√∫mero do processo de refer√™ncia √© obrigat√≥rio.")
            return
        st.session_state.jurisprudencias.append({
            "Tribunal": tribunal,
            "Processo Refer√™ncia": processo_referencia,
            "Data Decis√£o": data_decisao.strftime("%d/%m/%Y"),
            "Ementa": ementa,
            "Link": link_decisao
        })
        st.success("Jurisprud√™ncia cadastrada com sucesso.")

def despachos():
    st.title("üìÑ Cadastro de Despachos")

    # Puxar lista de processos cadastrados para usar no selectbox
    processos = st.session_state.processos
    numeros_processos = [p["N√∫mero"] for p in processos]

    with st.form("form_despacho"):
        # Selectbox para escolher n√∫mero do processo
        numero_processo = st.selectbox("N√∫mero do Processo", options=numeros_processos)
        texto_despacho = st.text_area("Texto do Despacho")
        data_despacho = st.date_input("Data do Despacho", value=datetime.today())
        submit = st.form_submit_button("Salvar Despacho")

    if submit:
        if numero_processo.strip() == "":
            st.error("N√∫mero do processo √© obrigat√≥rio.")
            return
        if texto_despacho.strip() == "":
            st.error("Texto do despacho √© obrigat√≥rio.")
            return
        st.session_state.despachos.append({
            "N√∫mero": numero_processo,
            "Texto": texto_despacho,
            "Data": data_despacho.strftime("%d/%m/%Y"),
            "Cadastrado por": st.session_state.usuario_logado
        })
        st.success("Despacho cadastrado com sucesso.")

    # Mostrar lista de despachos j√° cadastrados
    st.subheader("Despachos Cadastrados")
    if st.session_state.despachos:
        df_despachos = pd.DataFrame(st.session_state.despachos)
        st.dataframe(df_despachos)
    else:
        st.info("Nenhum despacho cadastrado.")


def movimentacoes():
    st.title("üìÖ Movimenta√ß√µes e Prazos")

    processos = st.session_state.processos
    opcoes_numero = [p["N√∫mero"] for p in processos] if processos else []

    with st.form("form_movimentacao"):
        if opcoes_numero:
            numero_processo = st.selectbox("N√∫mero do Processo", options=opcoes_numero)
        else:
            st.warning("Nenhum processo cadastrado ainda.")
            numero_processo = None
        prazo = st.text_input("Prazo (dd/mm/aaaa)")
        descricao_mov = st.text_area("Descri√ß√£o")
        submit = st.form_submit_button("Salvar Movimenta√ß√£o")

    if submit:
        if not numero_processo:
            st.error("Selecione um n√∫mero de processo v√°lido.")
            return
        if descricao_mov.strip() == "":
            st.error("Descri√ß√£o da movimenta√ß√£o √© obrigat√≥ria.")
            return
        try:
            prazo_dt = datetime.strptime(prazo, "%d/%m/%Y")
        except Exception:
            st.error("Data de prazo inv√°lida! Use o formato dd/mm/aaaa.")
            return

        st.session_state.movimentacoes.append({
            "N√∫mero": numero_processo,
            "Prazo": prazo,
            "Descri√ß√£o": descricao_mov
        })
        st.success("Movimenta√ß√£o cadastrada com sucesso.")
def agenda():
    st.title("üìÜ Agenda - Compromissos e Reuni√µes")

    # Inicializa lista na session_state
    if "agenda" not in st.session_state:
        st.session_state.agenda = []

    # Formul√°rio para cadastro de evento
    with st.form("form_agenda"):
        data_evento = st.date_input("Data do Evento")
        hora_evento = st.text_input("Hora do Evento (HH:MM)", max_chars=5, help="Formato 24h, ex: 14:30")
        evento = st.text_input("T√≠tulo do Evento")
        descricao = st.text_area("Descri√ß√£o")
        local = st.text_input("Local da Reuni√£o")
        advogado_representante = st.text_input("Advogado / Representante no Ato")
        modalidade = st.selectbox("Modalidade", ["Presencial", "Online"])
        submit = st.form_submit_button("Cadastrar Evento")

    if submit:
        # Valida√ß√£o b√°sica da hora
        try:
            hora_obj = datetime.strptime(hora_evento, "%H:%M").time()
        except Exception:
            st.error("Hora inv√°lida. Use o formato HH:MM (24h).")
            return

        st.session_state.agenda.append({
            "Data": data_evento.strftime("%d/%m/%Y"),
            "Hora": hora_evento,
            "Evento": evento,
            "Descri√ß√£o": descricao,
            "Local": local,
            "Advogado": advogado_representante,
            "Modalidade": modalidade
        })
        st.success("Evento cadastrado na agenda.")

    st.markdown("---")
    st.subheader("Eventos Cadastrados")

    # Mostra lista de eventos com bot√µes Editar e Excluir
    for idx, ev in enumerate(st.session_state.agenda):
        with st.expander(f"{ev['Data']} {ev['Hora']} - {ev['Evento']}"):
            st.write(f"**Descri√ß√£o:** {ev['Descri√ß√£o']}")
            st.write(f"**Local:** {ev['Local']}")
            st.write(f"**Advogado/Representante:** {ev['Advogado']}")
            st.write(f"**Modalidade:** {ev['Modalidade']}")

            col1, col2 = st.columns([1, 1])
            with col1:
                botao_editar_key = f"editar_evento_{idx}"
                if st.button("Editar", key=botao_editar_key):
                    # Carregar dados do evento para edi√ß√£o - s√≥ uma forma simples de edi√ß√£o
                    st.session_state["editar_evento_idx"] = idx
                    st.session_state["editar_evento_data"] = datetime.strptime(ev["Data"], "%d/%m/%Y")
                    st.session_state["editar_evento_hora"] = ev["Hora"]
                    st.session_state["editar_evento_titulo"] = ev["Evento"]
                    st.session_state["editar_evento_descricao"] = ev["Descri√ß√£o"]
                    st.session_state["editar_evento_local"] = ev["Local"]
                    st.session_state["editar_evento_advogado"] = ev["Advogado"]
                    st.session_state["editar_evento_modalidade"] = ev["Modalidade"]
                    st.experimental_rerun()
            with col2:
                botao_excluir_key = f"excluir_evento_{idx}"
                if st.button("Excluir", key=botao_excluir_key):
                    # Para evitar rerun infinito, usar flag na session_state
                    if f"excluiu_evento_{idx}" not in st.session_state:
                        st.session_state.agenda.pop(idx)
                        st.session_state[f"excluiu_evento_{idx}"] = True
                        st.success("Evento exclu√≠do.")
                        st.experimental_rerun()

    # Se estiver editando um evento
    if "editar_evento_idx" in st.session_state:
        idx = st.session_state["editar_evento_idx"]
        st.markdown("---")
        st.subheader("Editar Evento")

        with st.form("form_editar_evento"):
            data_edit = st.date_input("Data do Evento", value=st.session_state["editar_evento_data"])
            hora_edit = st.text_input("Hora do Evento (HH:MM)", value=st.session_state["editar_evento_hora"])
            titulo_edit = st.text_input("T√≠tulo do Evento", value=st.session_state["editar_evento_titulo"])
            descricao_edit = st.text_area("Descri√ß√£o", value=st.session_state["editar_evento_descricao"])
            local_edit = st.text_input("Local da Reuni√£o", value=st.session_state["editar_evento_local"])
            advogado_edit = st.text_input("Advogado / Representante no Ato", value=st.session_state["editar_evento_advogado"])
            modalidade_edit = st.selectbox("Modalidade", ["Presencial", "Online"], index=0 if st.session_state["editar_evento_modalidade"]=="Presencial" else 1)
            salvar = st.form_submit_button("Salvar Altera√ß√µes")

        if salvar:
            # Valida√ß√£o da hora
            try:
                datetime.strptime(hora_edit, "%H:%M")
            except Exception:
                st.error("Hora inv√°lida. Use o formato HH:MM (24h).")
                return
            st.session_state.agenda[idx] = {
                "Data": data_edit.strftime("%d/%m/%Y"),
                "Hora": hora_edit,
                "Evento": titulo_edit,
                "Descri√ß√£o": descricao_edit,
                "Local": local_edit,
                "Advogado": advogado_edit,
                "Modalidade": modalidade_edit
            }
            st.success("Evento atualizado com sucesso.")
            # Limpar sess√£o de edi√ß√£o
            for key in ["editar_evento_idx", "editar_evento_data", "editar_evento_hora", "editar_evento_titulo",
                        "editar_evento_descricao", "editar_evento_local", "editar_evento_advogado", "editar_evento_modalidade"]:
                if key in st.session_state:
                    del st.session_state[key]
            st.experimental_rerun()

def historico():
    st.title("üìú Hist√≥rico do Processo")

    numero = st.text_input("Informe o n√∫mero do processo para visualizar o hist√≥rico")

    if numero:
        # Coletar todos os registros relacionados ao processo
        processos = st.session_state.processos
        movimentacoes = st.session_state.movimentacoes
        despachos = st.session_state.despachos

        hist = []

        # Processos (cadastrados)
        for p in processos:
            if p["N√∫mero"] == numero:
                hist.append({
                    "Data": p.get("Data Distribui√ß√£o", ""),
                    "Evento": f"Cadastro do processo {numero}",
                    "Detalhes": f"Assunto: {p.get('Assunto', '')}"
                })

        # Movimenta√ß√µes
        for m in movimentacoes:
            if m["N√∫mero"] == numero:
                hist.append({
                    "Data": m.get("Prazo", ""),
                    "Evento": "Movimenta√ß√£o",
                    "Detalhes": m.get("Descri√ß√£o", "")
                })

        # Despachos
        for d in despachos:
            if d["N√∫mero"] == numero:
                hist.append({
                    "Data": d.get("Data", ""),
                    "Evento": "Despacho",
                    "Detalhes": d.get("Descri√ß√£o", "")
                })

        # Ordenar hist√≥rico pela data (considerando formato dd/mm/yyyy)
        def to_dt(data_str):
            try:
                return datetime.strptime(data_str, "%d/%m/%Y")
            except:
                return datetime(1900,1,1)
        hist_sorted = sorted(hist, key=lambda x: to_dt(x["Data"]))

        if hist_sorted:
            for item in hist_sorted:
                st.markdown(f"**{item['Data']}** - {item['Evento']}: {item['Detalhes']}")
        else:
            st.info("Nenhum registro encontrado para este processo.")

# Menu lateral
if st.session_state.logado:
    with st.sidebar:
        escolha = option_menu(
            menu_title="Menu CFO Jur√≠dico",
            options=["In√≠cio", "Cadastro Processo", "Jurisprud√™ncia", "Despacho", "Movimenta√ß√µes", "Agenda", "Hist√≥rico", "Sair"],
            icons=["house", "file-earmark-text", "book", "clipboard-data", "calendar-check", "calendar-event", "clock-history", "box-arrow-right"],
            menu_icon="briefcase",
            default_index=0
        )

    if escolha == "In√≠cio":
        inicio()
    elif escolha == "Cadastro Processo":
        cadastro_processo()
    elif escolha == "Jurisprud√™ncia":
        cadastro_jurisprudencia()
    elif escolha == "Despachos":
        despachos()
    elif escolha == "Movimenta√ß√µes":
        movimentacoes()
    elif escolha == "Agenda":
        agenda()
    elif escolha == "Hist√≥rico":
        historico()
    elif escolha == "Sair":
        st.session_state.logado = False
        st.session_state.usuario_logado = None
        st.experimental_rerun()
else:
    tela_login()

# Rodap√© fixo
st.markdown(
    """
    <div class="footer">
    Desenvolvido por Igor Sansone - Setor de Secretaria - Para uso do CFO
    </div>
    """, unsafe_allow_html=True)
