import streamlit as st
import pandas as pd
from datetime import datetime
from streamlit_option_menu import option_menu
import altair as alt
import streamlit.components.v1 as components
from io import BytesIO

# Fun√ß√£o para for√ßar rerun (usar se precisar)
def forcar_rerun():
    params = st.experimental_get_query_params()
    count = int(params["count"][0]) if "count" in params else 0
    st.experimental_set_query_params(count=str(count + 1))

st.set_page_config(layout="wide", page_title="Processos Elei√ß√£o CROS 2025 - CFO")

# CSS customizado (mant√©m o seu estilo)
def aplicar_css():
    st.markdown("""
    <style>
    body {
        font-family: 'Segoe UI', sans-serif;
    }
    .footer {
        position: fixed;
        bottom: 0;
        width: 100%;
        background-color: #0B3D91;
        color: white;
        text-align: center;
        padding: 6px 0;
        font-weight: 600;
        font-size: 14px;
    }
    .mobile-menu .nav-link {
        font-size: 20px !important;
        padding: 15px 10px !important;
    }
    </style>
    """, unsafe_allow_html=True)
aplicar_css()

# Detecta dispositivo para eventuais ajustes (opcional)
def detectar_dispositivo():
    if "dispositivo" not in st.session_state:
        dispositivo = st.text_input("dispositivo_input", value="", key="dispositivo_input", label_visibility="hidden")
        js_code = """
        <script>
        const input = window.parent.document.querySelector('input#dispositivo_input');
        function getDeviceType() {
            const ua = navigator.userAgent;
            if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua)){
                return "mobile";
            }
            return "desktop";
        }
        input.value = getDeviceType();
        input.dispatchEvent(new Event('input'));
        </script>
        """
        components.html(js_code, height=0)
        if dispositivo in ("mobile", "desktop"):
            st.session_state.dispositivo = dispositivo
            st.experimental_rerun()

detectar_dispositivo()

# Listas fixas para selectboxes
tipos_acao = [
    "", "A√ß√£o Civil P√∫blica", "A√ß√£o Popular", "A√ß√£o de Improbidade Administrativa", "Mandado de Seguran√ßa",
    "A√ß√£o Declarat√≥ria de Nulidade de Ato Administrativo", "A√ß√£o Anulat√≥ria de Ato Administrativo",
    "A√ß√£o de Cobran√ßa contra a Administra√ß√£o P√∫blica", "A√ß√£o de Obriga√ß√£o de Fazer contra o Poder P√∫blico",
    "A√ß√£o Indenizat√≥ria por Atos da Administra√ß√£o", "A√ß√£o de Responsabilidade por Dano ao Er√°rio",
    "A√ß√£o de Responsabiliza√ß√£o √âtica de Servidor P√∫blico", "A√ß√£o √âtica contra √ìrg√£o da Administra√ß√£o",
    "A√ß√£o √âtica sobre Conduta Funcional de Agente P√∫blico", "A√ß√£o de Controle de Constitucionalidade",
    "A√ß√£o Direta de Inconstitucionalidade", "A√ß√£o Declarat√≥ria de Constitucionalidade",
    "A√ß√£o Direta de Inconstitucionalidade por Omiss√£o", "A√ß√£o Rescis√≥ria contra Decis√µes Administrativas",
    "A√ß√£o Cautelar em Face da Administra√ß√£o", "A√ß√£o de Interven√ß√£o Federal",
    "A√ß√£o sobre Licita√ß√µes e Contratos Administrativos", "A√ß√£o sobre Concurso P√∫blico",
    "A√ß√£o sobre Servidores P√∫blicos Federais", "A√ß√£o Previdenci√°ria contra o INSS",
    "A√ß√£o sobre Sa√∫de P√∫blica (fornecimento de medicamentos etc.)", "A√ß√£o sobre Direito √† Educa√ß√£o P√∫blica",
    "A√ß√£o Coletiva sobre Pol√≠ticas P√∫blicas", "Outras"
]

recursos = [
    "", "Apela√ß√£o", "Agravo de Instrumento", "Embargos de Declara√ß√£o", "Recurso Especial",
    "Recurso Extraordin√°rio", "Mandado de Seguran√ßa", "Habeas Corpus", "Recurso Ordin√°rio",
    "Agravo Interno", "Embargos Infringentes", "Embargos √† Execu√ß√£o", "Revis√£o Criminal",
    "Correi√ß√£o Parcial", "Recurso em Sentido Estrito", "Conflito de Compet√™ncia", "Recurso Adesivo",
    "Agravo Regimental", "Outros"
]

locais_ajuizamento = ["", "JF", "TRF1", "TRF2", "TRF3", "TRF4", "TRF5", "TRF6", "STJ", "STF"]

# Inicializa√ß√£o das session states usados
if "logado" not in st.session_state:
    st.session_state.logado = False
if "usuario_logado" not in st.session_state:
    st.session_state.usuario_logado = None
if "usuarios" not in st.session_state:
    st.session_state.usuarios = [
        {"nome": "Admin", "usuario": "admin", "senha": "admin123", "permissao": "master"},
        {"nome": "Usu√°rio", "usuario": "user", "senha": "123", "permissao": "normal"}
    ]
if "processos" not in st.session_state:
    st.session_state.processos = []
if "jurisprudencias" not in st.session_state:
    st.session_state.jurisprudencias = []
if "despachos" not in st.session_state:
    st.session_state.despachos = []
if "movimentacoes" not in st.session_state:
    st.session_state.movimentacoes = []
if "agenda" not in st.session_state:
    st.session_state.agenda = []
if "autores" not in st.session_state:
    st.session_state.autores = [{"nome": "", "cpf_cnpj": ""}]
if "reus" not in st.session_state:
    st.session_state.reus = [{"nome": "", "cpf_cnpj": ""}]

# Fun√ß√µes b√°sicas
def validar_login(usuario, senha):
    for u in st.session_state.usuarios:
        if u["usuario"] == usuario and u["senha"] == senha:
            return u
    return None

def usuario_eh_master():
    user = st.session_state.usuario_logado
    for u in st.session_state.usuarios:
        if u["usuario"] == user:
            return u["permissao"] == "master"
    return False

# --- Telas ---

def tela_login():
    st.title("üîê Login - Sistema Jur√≠dico CFO")
    with st.form("form_login"):
        usuario = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")
    if submit:
        user = validar_login(usuario, senha)
        if user:
            st.session_state.logado = True
            st.session_state.usuario_logado = usuario
            st.success(f"Bem-vindo, {user['nome']}!")
            st.experimental_rerun()
        else:
            st.error("Usu√°rio ou senha inv√°lidos.")

def inicio():
    st.title("üè† Painel Inicial - CFO Jur√≠dico")

    processos = st.session_state.processos
    agenda = st.session_state.agenda
    movs = st.session_state.movimentacoes

    hoje = pd.Timestamp(datetime.today().date())

    # --- FILTROS ---
    st.sidebar.subheader("Filtros - P√°gina Inicial")

    prazo_filtro = st.sidebar.slider("Prazos a vencer nos pr√≥ximos dias:", min_value=1, max_value=60, value=30)

    tribunais_oficiais = ["JF", "TRF1", "TRF2", "TRF3", "TRF4", "TRF5", "TRF6"]
    tribunais_selecionados = st.sidebar.multiselect("Tribunais para o quantitativo:", options=tribunais_oficiais, default=tribunais_oficiais)

    st.sidebar.markdown("---")
    st.sidebar.write(f"Usu√°rio logado: **{st.session_state.usuario_logado}**")

    st.subheader("üìÖ Pr√≥ximas Reuni√µes")

    if agenda:
        df_agenda = pd.DataFrame(agenda)
        df_agenda["Data"] = pd.to_datetime(df_agenda["Data"], format="%d/%m/%Y", errors='coerce')
        proximas = df_agenda[df_agenda["Data"] >= hoje].sort_values("Data")

        if proximas.empty:
            st.info("Nenhuma reuni√£o agendada para os pr√≥ximos dias.")
        else:
            prox_reuniao = proximas.iloc[0]
            dias_para_reuniao = (prox_reuniao["Data"] - hoje).days
            st.markdown(f"**Pr√≥xima reuni√£o:** {prox_reuniao['Evento']} em {prox_reuniao['Data'].strftime('%d/%m/%Y')} ({dias_para_reuniao} dias restantes)")
            st.write(prox_reuniao["Descri√ß√£o"])

            if len(proximas) > 1:
                st.table(proximas.iloc[1:][["Data", "Evento", "Descri√ß√£o"]].reset_index(drop=True))
    else:
        st.info("Nenhuma reuni√£o cadastrada.")

    st.markdown("---")

    st.subheader("‚è≥ Prazos a Vencer")

    if movs and processos:
        df_movs = pd.DataFrame(movs)
        df_movs["Prazo"] = pd.to_datetime(df_movs["Prazo"], format="%d/%m/%Y", errors='coerce')

        filtro_prazo_final = hoje + pd.Timedelta(days=prazo_filtro)
        prazos_abertos = df_movs[(df_movs["Prazo"].notnull()) & (df_movs["Prazo"] >= hoje) & (df_movs["Prazo"] <= filtro_prazo_final)].copy()

        if prazos_abertos.empty:
            st.info(f"Nenhum prazo vencendo nos pr√≥ximos {prazo_filtro} dias.")
        else:
            df_proc = pd.DataFrame(processos)
            df_proc["N√∫mero"] = df_proc["N√∫mero"].astype(str)
            prazos_abertos["N√∫mero"] = prazos_abertos["N√∫mero"].astype(str)
            df_join = prazos_abertos.merge(df_proc, on="N√∫mero", how="left", suffixes=("_mov", "_proc"))

            df_join = df_join.sort_values("Prazo")
            df_join["Dias Restantes"] = (df_join["Prazo"] - hoje).dt.days

            def cor_prazo(dias):
                if dias > 15:
                    return "background-color: #d4edda"  # verde claro
                elif 10 <= dias <= 15:
                    return "background-color: #fff3cd"  # amarelo claro
                else:
                    return "background-color: #f8d7da"  # vermelho claro

            st.dataframe(
                df_join[["N√∫mero", "Assunto", "Prazo", "Descri√ß√£o", "Dias Restantes"]]
                .style.applymap(lambda v: cor_prazo(v), subset=["Dias Restantes"])
            )
    else:
        st.info("Nenhuma movimenta√ß√£o ou processo cadastrado.")

    st.markdown("---")

    st.subheader("üìä Quantitativo de Processos por Tribunal")

    if processos:
        df = pd.DataFrame(processos)
        if "Local Ajuizamento" in df.columns:
            df_filtrado = df[df["Local Ajuizamento"].isin(tribunais_selecionados)]
            contagem = df_filtrado["Local Ajuizamento"].value_counts().reindex(tribunais_selecionados, fill_value=0)
            contagem_df = contagem.reset_index()
            contagem_df.columns = ["Tribunal", "Quantidade"]

            cols = st.columns(len(contagem_df))
            cores = ["#007BFF", "#28A745", "#FFC107", "#DC3545", "#17A2B8", "#6F42C1", "#FD7E14"]

            for i, row in contagem_df.iterrows():
                with cols[i]:
                    st.markdown(f"""
                        <div style="background-color: {cores[i % len(cores)]}; padding: 20px; border-radius: 10px; text-align: center; color: white;">
                            <h3>{row['Quantidade']}</h3>
                            <p>{row['Tribunal']}</p>
                        </div>
                    """, unsafe_allow_html=True)

            chart = alt.Chart(contagem_df).mark_bar().encode(
                x=alt.X("Tribunal", sort=tribunais_selecionados),
                y="Quantidade",
                tooltip=["Tribunal", "Quantidade"],
                color=alt.Color("Quantidade", scale=alt.Scale(scheme="blues"))
            ).properties(width=600, height=300)
            st.altair_chart(chart, use_container_width=True)
        else:
            st.warning("Coluna 'Local Ajuizamento' n√£o encontrada nos processos.")
    else:
        st.info("Nenhum processo cadastrado.")

    # Bot√£o para exportar processos em Excel
    if processos:
        df_export = pd.DataFrame(processos)
        towrite = BytesIO()
        df_export.to_excel(towrite, index=False, sheet_name='Processos')
        towrite.seek(0)
        st.download_button(
            label="üì• Exportar Processos para Excel",
            data=towrite,
            file_name="processos.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )


def cadastro_processo():
    st.title("üìù Cadastro / Edi√ß√£o de Processo")

    if "autores" not in st.session_state:
        st.session_state.autores = [{"nome": "", "cpf_cnpj": ""}]
    if "reus" not in st.session_state:
        st.session_state.reus = [{"nome": "", "cpf_cnpj": ""}]

    st.write("### Parte Autora")
    for i in range(len(st.session_state.autores)):
        st.session_state.autores[i]["nome"] = st.text_input(f"Nome do Autor {i+1}", value=st.session_state.autores[i]["nome"], key=f"autor_nome_{i}")
        st.session_state.autores[i]["cpf_cnpj"] = st.text_input(f"CPF/CNPJ do Autor {i+1}", value=st.session_state.autores[i]["cpf_cnpj"], key=f"autor_cpf_{i}")
    if st.button("Adicionar Autor"):
        st.session_state.autores.append({"nome": "", "cpf_cnpj": ""})

    st.write("### Parte R√©")
    for i in range(len(st.session_state.reus)):
        st.session_state.reus[i]["nome"] = st.text_input(f"Nome do R√©u {i+1}", value=st.session_state.reus[i]["nome"], key=f"reu_nome_{i}")
        st.session_state.reus[i]["cpf_cnpj"] = st.text_input(f"CPF/CNPJ do R√©u {i+1}", value=st.session_state.reus[i]["cpf_cnpj"], key=f"reu_cpf_{i}")
    if st.button("Adicionar R√©u"):
        st.session_state.reus.append({"nome": "", "cpf_cnpj": ""})

    numero_default = st.session_state.get("numero_processo", "")
    assunto_default = st.session_state.get("assunto", "")
    data_distribuicao_default = st.session_state.get("data_distribuicao", datetime.today())
    tipo_acao_default = st.session_state.get("tipo_acao", tipos_acao[0])
    recurso_default = st.session_state.get("recurso", recursos[0])
    local_ajuizamento_default = st.session_state.get("local_ajuizamento", locais_ajuizamento[0])
    turma_vara_plenario_default = st.session_state.get("turma_vara_plenario", "")
    nome_magistrado_default = st.session_state.get("nome_magistrado", "")
    telefone_gabinete_default = st.session_state.get("telefone_gabinete", "")

    with st.form("form_processo"):
        numero = st.text_input("N√∫mero do Processo", value=numero_default)
        assunto = st.text_input("Assunto", value=assunto_default)
        data_distribuicao = st.date_input("Data de Distribui√ß√£o", value=data_distribuicao_default)
        tipo_acao = st.selectbox("Tipo de A√ß√£o", tipos_acao, index=tipos_acao.index(tipo_acao_default) if tipo_acao_default in tipos_acao else 0)
        recurso = st.selectbox("Recurso", recursos, index=recursos.index(recurso_default) if recurso_default in recursos else 0)
        local_ajuizamento = st.selectbox("Local onde foi ajuizado", locais_ajuizamento, index=locais_ajuizamento.index(local_ajuizamento_default) if local_ajuizamento_default in locais_ajuizamento else 0)
        turma_vara_plenario = st.text_input("Turma / Vara / Plen√°rio", value=turma_vara_plenario_default)
        nome_magistrado = st.text_input("Nome do Magistrado ou Ministro", value=nome_magistrado_default)
        telefone_gabinete = st.text_input("Telefone do Gabinete", value=telefone_gabinete_default)
        enviar = st.form_submit_button("Salvar Processo")

    if enviar:
        novo_processo = {
            "N√∫mero": numero,
            "Parte Autora": st.session_state.autores,
            "Parte R√©": st.session_state.reus,
            "Assunto": assunto,
            "Data de Distribui√ß√£o": data_distribuicao.strftime("%d/%m/%Y"),
            "Tipo de A√ß√£o": tipo_acao,
            "Recurso": recurso,
            "Local Ajuizamento": local_ajuizamento,
            "Turma/Vara/Plen√°rio": turma_vara_plenario,
            "Nome Magistrado": nome_magistrado,
            "Telefone Gabinete": telefone_gabinete
        }
        st.session_state.processos.append(novo_processo)
        st.success("Processo cadastrado com sucesso!")
        st.session_state.autores = [{"nome": "", "cpf_cnpj": ""}]
        st.session_state.reus = [{"nome": "", "cpf_cnpj": ""}]

def cadastro_jurisprudencia():
    st.title("üìö Cadastro de Jurisprud√™ncia")
    with st.form("form_jurisprudencia"):
        numero = st.text_input("N√∫mero")
        descricao = st.text_area("Descri√ß√£o")
        enviar = st.form_submit_button("Salvar Jurisprud√™ncia")
    if enviar:
        st.session_state.jurisprudencias.append({
            "N√∫mero": numero,
            "Descri√ß√£o": descricao
        })
        st.success("Jurisprud√™ncia cadastrada com sucesso!")

def movimentacoes():
    st.title("üîÑ Movimenta√ß√µes Processuais")
    with st.form("form_movimentacoes"):
        numero = st.text_input("N√∫mero do Processo")
        descricao = st.text_area("Descri√ß√£o da Movimenta√ß√£o")
        prazo = st.date_input("Prazo", value=datetime.today())
        enviar = st.form_submit_button("Registrar Movimenta√ß√£o")
    if enviar:
        st.session_state.movimentacoes.append({
            "N√∫mero": numero,
            "Descri√ß√£o": descricao,
            "Prazo": prazo.strftime("%d/%m/%Y")
        })
        st.success("Movimenta√ß√£o registrada com sucesso!")

def agenda_eventos():
    st.title("üìÖ Agenda de Eventos")
    with st.form("form_agenda"):
        data = st.date_input("Data do Evento", value=datetime.today())
        evento = st.text_input("Evento")
        descricao = st.text_area("Descri√ß√£o")
        enviar = st.form_submit_button("Salvar Evento")
    if enviar:
        st.session_state.agenda.append({
            "Data": data.strftime("%d/%m/%Y"),
            "Evento": evento,
            "Descri√ß√£o": descricao
        })
        st.success("Evento cadastrado com sucesso!")

def relatorios():
    st.title("üìä Relat√≥rios")
    st.write("Funcionalidade de relat√≥rios a ser implementada...")

def rodape():
    st.markdown(
        """
        <div class="footer">Desenvolvido por Igor Sansone - Setor de Secretaria</div>
        """, 
        unsafe_allow_html=True
    )

def main():
    if not st.session_state.logado:
        tela_login()
    else:
        with st.sidebar:
            selected = option_menu(
                "Menu Principal",
                ["In√≠cio", "Cadastro Processo", "Cadastro Jurisprud√™ncia", "Movimenta√ß√µes", "Agenda", "Relat√≥rios", "Sair"],
                icons=["house", "file-earmark-text", "book", "arrow-repeat", "calendar", "bar-chart-line", "box-arrow-right"],
                menu_icon="cast",
                default_index=0,
            )
        if selected == "In√≠cio":
            inicio()
        elif selected == "Cadastro Processo":
            cadastro_processo()
        elif selected == "Cadastro Jurisprud√™ncia":
            cadastro_jurisprudencia()
        elif selected == "Movimenta√ß√µes":
            movimentacoes()
        elif selected == "Agenda":
            agenda_eventos()
        elif selected == "Relat√≥rios":
            relatorios()
        elif selected == "Sair":
            st.session_state.logado = False
            st.session_state.usuario_logado = None
            st.experimental_rerun()

        rodape()

        st.markdown('<div class="footer">Desenvolvido por Igor Sansone - Setor de Secretaria - Para uso do Conselho Federal de Odontologia</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()
